{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/robots.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","username","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a85b6f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const{id,name,username,email} = props; //destructuring\r\n    return(\r\n     <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n         <img alt='pic' src={`https://robohash.org/${props.id}?200x200`}   />\r\n         <div>\r\n             <h2>{name}</h2>\r\n             <h3>{username}</h3>\r\n             <p>{email}</p>\r\n         </div>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Card ;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n     return(\r\n     <div>\r\n        {\r\n            robots.map((user,i) => {\r\n        return( <Card \r\n            key={robots[i].id} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            username={robots[i].username} \r\n            email={robots[i].email}\r\n            />\r\n            ) ;\r\n          })\r\n        }\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield ,searchChange }) => {\r\n\r\n    return(\r\n      <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search for ....' \r\n        onChange={searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflow: 'scroll',border: '1px solid black',height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;\r\n","export const robots = [\r\n    {\r\n        id :1,\r\n        name :'Silene Oliveira',\r\n        username :'Tokyo',\r\n        email :'tokyo@gmail.com'\r\n    },\r\n    {\r\n        id :2,\r\n        name :'Andrés de Fonollosa',\r\n        username :'Berlin',\r\n        email :'berlin@gmail.com'\r\n    },\r\n    {\r\n        id :3,\r\n        name :'Agustín Ramos',\r\n        username :'Moscow',\r\n        email :'moscow@gmail.com'\r\n    },\r\n    {\r\n        id :4,\r\n        name :'Ágata Jiménez',\r\n        username :'Nairobi',\r\n        email :'nairobi@gmail.com'\r\n    },\r\n    {\r\n        id :5,\r\n        name :'Aníbal Cortés',\r\n        username :'Rio',\r\n        email :'rio@gmail.com'\r\n    },\r\n    {\r\n        id :6,\r\n        name :'Ricardo',\r\n        username :'Denver',\r\n        email :'denver@gmail.com'\r\n    },\r\n    {\r\n        id :7,\r\n        name :' Mirko Dragic',\r\n        username :'Helsinki',\r\n        email :'helsinki@gmail.com'\r\n    },\r\n    {\r\n        id :8,\r\n        name :'Dimitri Mostovói',\r\n        username :'Oslo',\r\n        email :'oslo@gmail.com'\r\n    },\r\n    {\r\n        id :9,\r\n        name :'Sergio Marquina',\r\n        username :'Pofessor',\r\n        email :'professor@gmail.com'\r\n    },\r\n    {\r\n        id :10,\r\n        name :'Raquel Murillo',\r\n        username :'Lisbon',\r\n        email :'lisbon@gmail.com'\r\n    }\r\n\r\n];","import React,{ Component } from'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props)\r\n            this.state = {\r\n                hasError: false\r\n            }\r\n        }\r\n\r\n        componentDidCatch(error, info){\r\n            this.setState({hasError:true})\r\n        }\r\n\r\n        render(){\r\n            if(this.state.hasError){\r\n                return <h1> Ooops. That is not good</h1>\r\n            }\r\n            return this.props.children\r\n        }\r\n    }\r\n\r\n\r\n  export default ErrorBoundry;","import React,{ Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport {robots} from '../Components/robots';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: '' \r\n        }\r\n    }\r\n      \r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        \r\n        \r\n    }\r\n\r\n   render(){\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n        return robot.username.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    } )\r\n    if(this.state.robots.length===0){\r\n        return <h1>Connecting...</h1>\r\n    }\r\n    else{\r\n    return (\r\n        <div className='tc'> \r\n         <h1 className='f1'> Money Heist</h1>\r\n         <SearchBox searchChange={this.onSearchChange} />\r\n         <Scroll> \r\n          <ErrorBoundry>\r\n          <CardList robots={filteredRobots} /> \r\n          </ErrorBoundry>\r\n         </Scroll>\r\n        </div>\r\n \r\n     );\r\n    }\r\n   }\r\n}\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App />  \n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}